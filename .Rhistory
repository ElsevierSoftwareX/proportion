if(ULT[j+1]>1) ULT[j+1]=1
}
####COVERAGE PROBABILITIES
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
if(hp[j] > LLT[i] && hp[j] < ULT[i])
{
cpLT[i,j]=dbinom(i-1, n,hp[j])
ctLT[i,j]=1
}
}
cppLT[j]=sum(cpLT[,j])				#Coverage Probability
if(t1<cppLT[j]&&cppLT[j]<t2) ctr=ctr+1		#tolerance for cov prob - user defined
}
CPLT=data.frame(hp,cp=cppLT,method="Logit-Wald")
return(CPLT)
}
PlotcovpLT(n,alp,a,b,t1,t2)
WaldLcovp.df   = covpLT(n,alp,a,b,t1,t2)
nndf=gcovpLT(n,alp,a,b,t1,t2)
nndf$mcp=WaldLcovp.df$mcpLT
nndf$micp=WaldLcovp.df$micpLT
ggplot2::ggplot(nndf, ggplot2::aes(x=hp, y=cp))+
ggplot2::labs(title = "Coverage Probability for Logit Wald method") +
ggplot2::labs(y = "Coverage Probability") +
ggplot2::labs(x = "p") +
ggplot2::geom_hline(ggplot2::aes(yintercept=t1), color="red",linetype = 2) +
ggplot2::geom_hline(ggplot2::aes(yintercept=t2), color="blue",linetype = 2) +
ggplot2::geom_text(ggplot2::aes(y=t1, label="\nLower tolerance(t1)", x=.1), colour="red", text=ggplot2::element_text(size=11)) +
ggplot2::geom_text(ggplot2::aes(y=t2, label="Higher tolerance(t2)", x=.1), colour="blue", text=ggplot2::element_text(size=11)) +
ggplot2::geom_hline(ggplot2::aes(yintercept=micp,color="Minimum Coverage"))+
ggplot2::geom_hline(ggplot2::aes(yintercept=mcp,color="Mean Coverage"))+
ggplot2::geom_line(ggplot2::aes(color=method)) +
ggplot2::guides(colour = ggplot2::guide_legend("Heading"))+
ggplot2::geom_hline(ggplot2::aes(yintercept=1-(alp)),linetype = 2)
rm(list=ls())
library(proportion)
n= 10; alp=0.05; a=1; b=1; t1=0.93; t2=0.97
PlotcovpLT(n,alp,a,b,t1,t2)
PlotcovpSC(n,alp,a,b,t1,t2)
PlotcovpAWD<-function(n,alp,h,a,b,t1,t2)
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(h)) stop("'h' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if (missing(t1)) stop("'t1' is missing")
if (missing(t2)) stop("'t2' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp) >1) stop("'alpha' has to be between 0 and 1")
if ((class(h) != "integer") & (class(h) != "numeric") || length(h)>1 || h<0  ) stop("'h' has to be greater than or equal to 0")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
if (t1>t2) stop(" t1 has to be lesser than t2")
if ((class(t1) != "integer") & (class(t1) != "numeric") || length(t1)>1 || t1<0 || t1>1 ) stop("'t1' has to be between 0 and 1")
if ((class(t2) != "integer") & (class(t2) != "numeric") || length(t2)>1 || t2<0 || t2>1 ) stop("'t2' has to be between 0 and 1")
#### Calling functions and creating df
Waldcovp.df    = covpAWD(n,alp,h,a,b,t1,t2)
# ss1 = data.frame( MeanCP=Waldcovp.df$mcpAW, MinCP= Waldcovp.df$micpAW, RMSE_N=Waldcovp.df$RMSE_N,RMSE_M=Waldcovp.df$RMSE_M,RMSE_MI=Waldcovp.df$RMSE_MI,tol=Waldcovp.df$tol)
nndf    = gcovpAWD(n,alp,h,a,b,t1,t2)
nndf$mcp=Waldcovp.df$mcpAW
nndf$micp=Waldcovp.df$micpAW
ggplot2::ggplot(nndf, ggplot2::aes(x=hp, y=cp))+
ggplot2::labs(title = "Coverage Probability of the adjusted Wald method") +
ggplot2::labs(y = "Coverage Probability") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(ggplot2::aes(color=method)) +
ggplot2::geom_hline(ggplot2::aes(yintercept=micp,color="Minimum Coverage"))+
ggplot2::geom_hline(ggplot2::aes(yintercept=mcp,color="Mean Coverage"))+
ggplot2::geom_hline(ggplot2::aes(yintercept=t1), color="red",linetype = 2) +
ggplot2::geom_hline(ggplot2::aes(yintercept=t2), color="blue",linetype = 2) +
ggplot2::geom_text(ggplot2::aes(y=t1, label="\nLower tolerance(t1)", x=.1), colour="red", text=ggplot2::element_text(size=11)) +
ggplot2::geom_text(ggplot2::aes(y=t2, label="Higher tolerance(t2)", x=.1), colour="blue", text=ggplot2::element_text(size=11)) +
ggplot2::guides(colour = ggplot2::guide_legend("Heading")) +
ggplot2::geom_hline(ggplot2::aes(yintercept=1-(alp)),linetype = 2)
}
gcovpAWD<-function(n,alp,h,a,b,t1,t2)
{
####INPUT n
x=0:n
k=n+1
y=x+h
n1=n+(2*h)
####INITIALIZATIONS
pAW=0
qAW=0
seAW=0
LAW=0
UAW=0
s=5000								#Simulation run to generate hypothetical p
cpAW=matrix(0,k,s)
ctAW=matrix(0,k,s)							#Cover Pbty quantity in sum
cppAW=0								#Coverage probabilty
ctr=0
###CRITICAL VALUES
cv=qnorm(1-(alp/2), mean = 0, sd = 1)
#WALD METHOD
for(i in 1:k)
{
pAW[i]=y[i]/n1
qAW[i]=1-pAW[i]
seAW[i]=sqrt(pAW[i]*qAW[i]/n1)
LAW[i]=pAW[i]-(cv*seAW[i])
UAW[i]=pAW[i]+(cv*seAW[i])
if(LAW[i]<0) LAW[i]=0
if(UAW[i]>1) UAW[i]=1
}
####COVERAGE PROBABILITIES
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
if(hp[j] > LAW[i] && hp[j] < UAW[i])
{
cpAW[i,j]=dbinom(i-1, n,hp[j])
ctAW[i,j]=1
}
}
cppAW[j]=sum(cpAW[,j])
if(t1<cppAW[j]&&cppAW[j]<t2) ctr=ctr+1		#tolerance for cov prob - user defined
}
CPAW=data.frame(hp,cp=cppAW,method="Adj-Wald")
return(CPAW)
}
PlotcovpAWD<-function(n,alp,h,a,b,t1,t2)
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(h)) stop("'h' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if (missing(t1)) stop("'t1' is missing")
if (missing(t2)) stop("'t2' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp) >1) stop("'alpha' has to be between 0 and 1")
if ((class(h) != "integer") & (class(h) != "numeric") || length(h)>1 || h<0  ) stop("'h' has to be greater than or equal to 0")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
if (t1>t2) stop(" t1 has to be lesser than t2")
if ((class(t1) != "integer") & (class(t1) != "numeric") || length(t1)>1 || t1<0 || t1>1 ) stop("'t1' has to be between 0 and 1")
if ((class(t2) != "integer") & (class(t2) != "numeric") || length(t2)>1 || t2<0 || t2>1 ) stop("'t2' has to be between 0 and 1")
#### Calling functions and creating df
Waldcovp.df    = covpAWD(n,alp,h,a,b,t1,t2)
# ss1 = data.frame( MeanCP=Waldcovp.df$mcpAW, MinCP= Waldcovp.df$micpAW, RMSE_N=Waldcovp.df$RMSE_N,RMSE_M=Waldcovp.df$RMSE_M,RMSE_MI=Waldcovp.df$RMSE_MI,tol=Waldcovp.df$tol)
nndf    = gcovpAWD(n,alp,h,a,b,t1,t2)
nndf$mcp=Waldcovp.df$mcpAW
nndf$micp=Waldcovp.df$micpAW
ggplot2::ggplot(nndf, ggplot2::aes(x=hp, y=cp))+
ggplot2::labs(title = "Coverage Probability of the adjusted Wald method") +
ggplot2::labs(y = "Coverage Probability") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(ggplot2::aes(color=method)) +
ggplot2::geom_hline(ggplot2::aes(yintercept=micp,color="Minimum Coverage"))+
ggplot2::geom_hline(ggplot2::aes(yintercept=mcp,color="Mean Coverage"))+
ggplot2::geom_hline(ggplot2::aes(yintercept=t1), color="red",linetype = 2) +
ggplot2::geom_hline(ggplot2::aes(yintercept=t2), color="blue",linetype = 2) +
ggplot2::geom_text(ggplot2::aes(y=t1, label="\nLower tolerance(t1)", x=.1), colour="red", text=ggplot2::element_text(size=11)) +
ggplot2::geom_text(ggplot2::aes(y=t2, label="Higher tolerance(t2)", x=.1), colour="blue", text=ggplot2::element_text(size=11)) +
ggplot2::guides(colour = ggplot2::guide_legend("Heading")) +
ggplot2::geom_hline(ggplot2::aes(yintercept=1-(alp)),linetype = 2)
}
n= 10; alp=0.05; h=2;a=1;b=1; t1=0.93;t2=0.97
PlotcovpAWD(n,alp,h,a,b,t1,t2)
rm(list=ls())
library(proportion)
n= 10; alp=0.05; h=2;a=1;b=1; t1=0.93;t2=0.97
PlotcovpAWD(n,alp,h,a,b,t1,t2)
PlotcovpASC(n,alp,h,a,b,t1,t2)
PlotcovpALR(n,alp,h,a,b,t1,t2)
n= 10; alp=0.05; c=1/(2*n);a=1;b=1; t1=0.93;t2=0.97
library(proportion)
PlotcovpCTW(n,alp,c,a,b,t1,t2)
PlotcovpCWD(n,alp,c,a,b,t1,t2)
n=5; alp=0.05;e=0.5;a=1;b=1
PlotexplEX(n,alp,e,a,b)
n=5; alp=0.05;e=c(0.1,0.5,0.95,1);a=1;b=1
PlotexplEX(n,alp,e,a,b)
n=5; alp=0.05;a=1;b=1;a1=1;a2=1
PlotexplBA(n,alp,a,b,a1,a2)
PlotexplAll(n,alp,a,b)
library(proportion)
PlotexplLR(n,alp,a,b)
PlotexplTW(n,alp,a,b)
PlotexplWD(n,alp,a,b)
PlotexplLT(n,alp,a,b)
PlotexplSC(n,alp,a,b)
n=10
PlotexplSC(n,alp,a,b)
PlotexplWD(n,alp,a,b)
PlotlengthAll(n,alp,a,b)
n=5; alp=0.05;e=c(0.1,0.5,0.95,1);a=1;b=1
PlotlengthEX(n,alp,e,a,b)
e=05
PlotlengthEX(n,alp,e,a,b)
e=0.5
PlotlengthEX(n,alp,e,a,b)
n= 10; alp=0.05; h=2;a=1;b=1;
PlotexplAdj(n,alp,h,a,b)
PlotexplAWD<-function(n,alp,h,a,b)
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(h)) stop("'h' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp) >1) stop("'alpha' has to be between 0 and 1")
if ((class(h) != "integer") & (class(h) != "numeric") || length(h)>1 || h<0  ) stop("'h' has to be greater than or equal to 0")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
#### Calling functions and creating df
df.awd=  gexplAWD(n,alp,h,a,b)
ddf.awd = lengthAWD(n,alp,h,a,b)
df.awd$gMean=ddf.awd$explMean
df.awd$gMax=ddf.awd$explMax
df.awd$gUL=ddf.awd$explMean+ddf.awd$explSD
df.awd$gLL=ddf.awd$explMean-ddf.awd$explSD
ggplot2::ggplot(data=df.awd, mapping=ggplot2::aes(x=hp, y=ew)) +
ggplot2::labs(title = "Expected length of adjusted Wald method") +
ggplot2::labs(y = "Expected length") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(mapping=ggplot2::aes(colour=method), show_guide = TRUE) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gMean, fill="Mean"),color="orange"  ) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gMax, fill="Max"),color="blue"  ) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gLL, fill="Lower Limit"),color="cyan4"  ) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gUL, fill="Upper Limit"),color="brown"  ) +
ggplot2::scale_color_hue("Method") +
ggplot2::scale_fill_manual(
"Metric lines", values=c(1,1,1,1),
guide=ggplot2::guide_legend(override.aes = list(colour=c("orange", "blue", "cyan4","brown"))),
labels=c("Mean", "Max", "Lower Limit(Mean- 1SD)", "Upper Limit(Mean + 1SD)"))
}
gexplAWD<-function(n,alp,h,a,b)
{
####INPUT n
x=0:n
k=n+1
y=x+h
m=n+(2*h)
####INITIALIZATIONS
pAW=0
qAW=0
seAW=0
LAW=0
UAW=0
s=2000
LEAW=0 								#LENGTH OF INTERVAL
ewiAW=matrix(0,k,s)						#Expected length quantity in sum
ewAW=0									#Expected Length
###CRITICAL VALUES
cv=qnorm(1-(alp/2), mean = 0, sd = 1)
#WALD METHOD
for(i in 1:k)
{
pAW[i]=y[i]/m
qAW[i]=1-pAW[i]
seAW[i]=sqrt(pAW[i]*qAW[i]/m)
LAW[i]=pAW[i]-(cv*seAW[i])
UAW[i]=pAW[i]+(cv*seAW[i])
if(LAW[i]<0) LAW[i]=0
if(UAW[i]>1) UAW[i]=1
LEAW[i]=UAW[i]-LAW[i]
}
sumLEAW=sum(LEAW)
####Expected Length
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
ewiAW[i,j]=LEAW[i]*dbinom(i-1, n,hp[j])
}
ewAW[j]=sum(ewiAW[,j])						#Expected Length
}
ELAW=data.frame(hp,ew=ewAW,method="Adj-Wald")
# plot(ELAW,xlab="p",ylab="Expected Length",main="Adjusted Wald",type="l")
# abline(v=0.5, lty=2)
return(ELAW)
}
###############################################################################################################
PlotexplAWD<-function(n,alp,h,a,b)
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(h)) stop("'h' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp) >1) stop("'alpha' has to be between 0 and 1")
if ((class(h) != "integer") & (class(h) != "numeric") || length(h)>1 || h<0  ) stop("'h' has to be greater than or equal to 0")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
#### Calling functions and creating df
df.awd=  gexplAWD(n,alp,h,a,b)
ddf.awd = lengthAWD(n,alp,h,a,b)
df.awd$gMean=ddf.awd$explMean
df.awd$gMax=ddf.awd$explMax
df.awd$gUL=ddf.awd$explMean+ddf.awd$explSD
df.awd$gLL=ddf.awd$explMean-ddf.awd$explSD
ggplot2::ggplot(data=df.awd, mapping=ggplot2::aes(x=hp, y=ew)) +
ggplot2::labs(title = "Expected length of adjusted Wald method") +
ggplot2::labs(y = "Expected length") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(mapping=ggplot2::aes(colour=method), show_guide = TRUE) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gMean, fill="Mean"),color="orange"  ) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gMax, fill="Max"),color="blue"  ) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gLL, fill="Lower Limit"),color="cyan4"  ) +
ggplot2::geom_hline(mapping=ggplot2::aes(yintercept=gUL, fill="Upper Limit"),color="brown"  ) +
ggplot2::scale_color_hue("Method") +
ggplot2::scale_fill_manual(
"Metric lines", values=c(1,1,1,1),
guide=ggplot2::guide_legend(override.aes = list(colour=c("orange", "blue", "cyan4","brown"))),
labels=c("Mean", "Max", "Lower Limit(Mean- 1SD)", "Upper Limit(Mean + 1SD)"))
}
PlotexplAWD(n,alp,h,a,b)
n= 10; alp=0.05; h=2; a=1;b=1;
PlotlengthAdj(n,alp,h,a,b)
PlotlengthAWD(n,alp,h,a,b)
n= 10; alp=0.05; c=1/(2*n);a=1;b=1;
PlotexplCAll(n,alp,c,a,b)
PlotexplCAWD(n,alp,c,a,b)
PlotexplCWD(n,alp,c,a,b)
rm(list=ls())
n= 10; alp=0.05; c=1/(2*n);a=1;b=1;
library(proportion)
PlotexplCTW(n,alp,c,a,b)
PlotexplCLT(n,alp,c,a,b)
PlotexplCSC(n,alp,c,a,b)
PlotexplCWD(n,alp,c,a,b)
PlotexplCAS(n,alp,c,a,b)
PlotlengthCAll(n,alp,c,a,b)
PlotlengthCWD(n,alp,c,a,b)
LL=c(0,0.01,0.0734,0.18237,0.3344,0.5492)
UL=c(0.4507,0.6655,0.8176,0.9265,0.9899,1)
n=5
sumlenGEN(n,LL,UL)
n= 5; s=5000; a=1; b=1;
PlotexplSIM(n,LL,UL,s,a,b)
hp=seq(0,1,by=0.01)
PlotexplGEN(n,LL,UL,hp)
n=5; alp=0.05;e=0.5;a=1;b=1 # Mid-p
PlotpCOpBIEX(n,alp,e)
n=5; alp=0.05;e=c(0.1,0.5,0.95,1);a=1;b=1
PlotpCOpBIEX(n,alp,e)
n=5; alp=0.05;a1=1;a2=1
PlotpCOpBIBA(n,alp,a1,a2)
PlotpCOpBIAll(n,alp)
PlotpCOpBIWD(n,alp)
PlotpCOpBISC(n,alp)
n=5; alp=0.05;h=2
PlotpCOpBIAdj(n,alp,h)
PlotpCOpBIAWD(n,alp,h)
n=5; alp=0.05;c=1/(2*n)
PlotpCOpBICAll(n,alp,c)
PlotpCOpBICAll<-function(n,alp,c) #n:No of trials,alp:sign level
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(c)) stop("'c' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp) >1) stop("'alpha' has to be between 0 and 1")
if (c<=0 || c>(1/(2*n)) || length(c)>1) stop("'c' has to be positive and less than or equal to 1/(2*n)")
nAll = pCOpBICAll(n,alp,c)
pc=data.frame(x=nAll$x1, val=nAll$pconf, Heading=nAll$method, mark="pconf",minmax=min(nAll$pbias, nAll$pconf))
pb=data.frame(x=nAll$x1, val=nAll$pbias, Heading=nAll$method, mark="pbias",minmax=max(nAll$pbias, nAll$pconf))
nndf=rbind(pc,pb)
cdfWDc = subset(nndf, Heading == "CC-Wald" & mark== "pconf")
cdfWDb = subset(nndf, Heading == "CC-Wald" & mark== "pbias")
cdfSCc = subset(nndf, Heading == "CC-Score" & mark== "pconf")
cdfSCb = subset(nndf, Heading == "CC-Score" & mark== "pbias")
cdfASc = subset(nndf, Heading == "CC-ArcSine" & mark== "pconf")
cdfASb = subset(nndf, Heading == "CC-ArcSine" & mark== "pbias")
cdfLTc = subset(nndf, Heading == "CC-Logit-Wald" & mark== "pconf")
cdfLTb = subset(nndf, Heading == "CC-Logit-Wald" & mark== "pbias")
cdfTWc = subset(nndf, Heading == "CC-Wald-T" & mark== "pconf")
cdfTWb = subset(nndf, Heading == "CC-Wald-T" & mark== "pbias")
ggplot2::ggplot(nndf, ggplot2::aes(x=x, y=val))+
ggplot2::labs(title = "p-Confidence & p-Bias - Continuity corrected methods") +
ggplot2::facet_wrap(Heading ~ mark,scales="free_y",ncol=2) +
ggplot2::labs(y = "Confidence ") +
ggplot2::labs(x = "No of successes") +
ggplot2::geom_line(data=cdfWDc,ggplot2::aes(color="pConf CC-Wald"))+
ggplot2::geom_point(data=cdfWDc, ggplot2::aes(color="pConf CC-Wald Values"),shape=22)+
ggplot2::geom_line(data=cdfWDb,ggplot2::aes(color="pbias CC-Wald"))+
ggplot2::geom_point(data=cdfWDb,ggplot2::aes(color="pbias CC-Wald Values"),shape=23)+
ggplot2::geom_line(data=cdfSCc,ggplot2::aes(color="pConf CC-Score"))+
ggplot2::geom_point(data=cdfSCc, ggplot2::aes(color="pConf CC-Score Values"),shape=21)+
ggplot2::geom_line(data=cdfSCb,ggplot2::aes(color="pbias CC-Score"))+
ggplot2::geom_point(data=cdfSCb,ggplot2::aes(color="pbias CC-Score Values"),shape=16)+
ggplot2::geom_line(data=cdfASc,ggplot2::aes(color="pConf CC-ArcSine"))+
ggplot2::geom_point(data=cdfASc, ggplot2::aes(color="pConf CC-ArcSine Values"),shape=22)+
ggplot2::geom_line(data=cdfASb,ggplot2::aes(color="pbias CC-ArcSine"))+
ggplot2::geom_point(data=cdfASb,ggplot2::aes(color="pbias CC-ArcSine Values"),shape=23)+
ggplot2::geom_line(data=cdfTWc,ggplot2::aes(color="pConf CC-Wald-T"))+
ggplot2::geom_point(data=cdfTWc, ggplot2::aes(color="pConf CC-Wald-T Values"),shape=21)+
ggplot2::geom_line(data=cdfTWb,ggplot2::aes(color="pbias CC-Wald-T"))+
ggplot2::geom_point(data=cdfTWb,ggplot2::aes(color="pbias CC-Wald-T Values"),shape=16)+
ggplot2::geom_line(data=cdfLTc,ggplot2::aes(color="pConf CC-Logit-Wald"))+
ggplot2::geom_point(data=cdfLTc, ggplot2::aes(color="pConf CC-Logit-Wald Values"),shape=21)+
ggplot2::geom_line(data=cdfLTb,ggplot2::aes(color="pbias CC-Logit-Wald"))+
ggplot2::geom_point(data=cdfLTb,ggplot2::aes(color="pbias CC-Logit-Wald Values"),shape=16)+
ggplot2::scale_colour_manual(name='Heading',
values=c(
'pConf CC-Wald'='red',
'pConf CC-Wald Values'='red',
'pbias CC-Wald'='black',
'pbias CC-Wald Values'='black',
'pConf CC-Score'='red',
'pConf CC-Score Values'='red',
'pbias CC-Score'='black',
'pbias CC-Score Values'='black',
'pConf CC-ArcSine'='red',
'pConf CC-ArcSine Values'='red',
'pbias CC-ArcSine'='black',
'pbias CC-ArcSine Values'='black',
'pConf CC-Logit-Wald'='red',
'pConf CC-Logit-Wald Values'='red',
'pbias CC-Logit-Wald'='black',
'pbias CC-Logit-Wald Values'='black',
'pConf CC-Wald-T'='red',
'pConf CC-Wald-T Values'='red',
'pbias CC-Wald-T'='black',
'pbias CC-Wald-T Values'='black'),
ggplot2::scale_colour_hue(guide = "none"))
}
PlotpCOpBICAll(n,alp,c)
PlotpCOpBICWD(n,alp,c)
PlotpCOpBICSC(n,alp,c)
PlotpCOpBICLT(n,alp,c)
PlotpCOpBICTW(n,alp,c)
n=10
PlotpCOpBICTW(n,alp,c)
PlotpCOpBICSC(n,alp,c)
PlotpCOpBICWD(n,alp,c)
PlotpCOpBIGEN(n,LL,UL)
n=5
PlotpCOpBIGEN(n,LL,UL)
n=20; alp=0.05; phi=0.05; f=-2
PloterrAll(n,alp,phi,f)
PloterrWD(n,alp,phi,f)
errdf=  errWD(n,alp,phi,f)
errdf$method = as.factor("Wald")
alpdf=  errdf[,c(1,3,4)]
thetadf=errdf[,c(2,3,4)]
vdfa=data.frame(value=alpdf$delalp ,mark="Increase in nominal error" ,Fail_Pass=alpdf$Fail_Pass ,method=alpdf$method)
vdft=data.frame(value=thetadf$theta ,mark="Long term power of test",Fail_Pass=thetadf$Fail_Pass, method=thetadf$method)
full.df=rbind(vdfa,vdft)
ggplot2::ggplot(full.df, ggplot2::aes(x = method, y = value, fill = Fail_Pass)) +
ggplot2::labs(title = "Error, long term power and pass/fail for Wald method") +
ggplot2::facet_grid(mark ~ .,scales="free_y") +
ggplot2::geom_bar(stat="identity",position = "identity",width=0.5)
errdf=  errBA(n,alp,phi,f,a,b)
alpdf=  errdf[,c(1,3,4)]
thetadf=errdf[,c(2,3,4)]
vdfa=data.frame(value=alpdf$delalp ,mark="Increase in nominal error" ,Fail_Pass=alpdf$Fail_Pass ,method=alpdf$method)
vdft=data.frame(value=thetadf$theta ,mark="Long term power of test",Fail_Pass=thetadf$Fail_Pass, method=thetadf$method)
full.df=rbind(vdfa,vdft)
ggplot2::ggplot(full.df, ggplot2::aes(x = method, y = value, fill = Fail_Pass)) +
ggplot2::labs(title = "Error, long term power and pass/fail for Bayesian method") +
ggplot2::facet_grid(mark ~ .,scales="free_y") +
ggplot2::geom_bar(stat="identity",position = "identity",width=0.5)
errdf=  errEX(n,alp,phi,f,e)
errdf$e = as.factor(errdf$e)
alpdf=  errdf[,c(1,3,4)]
thetadf=errdf[,c(2,3,4)]
vdfa=data.frame(value=alpdf$delalp ,mark="Increase in nominal error" ,Fail_Pass=alpdf$Fail_Pass ,e=alpdf$e)
vdft=data.frame(value=thetadf$theta ,mark="Long term power of test",Fail_Pass=thetadf$Fail_Pass, e=thetadf$e)
full.df=rbind(vdfa,vdft)
ggplot2::ggplot(full.df, ggplot2::aes(x = e, y = value, fill = Fail_Pass)) +
ggplot2::labs(title = "Error, long term power and pass/fail for Exact method") +
ggplot2::facet_grid(mark ~ .,scales="free_y") +
ggplot2::geom_bar(stat="identity",position = "identity",width=0.5)
n=20; alp=0.05; h=2;phi=0.99; f=-2
PloterrAWD(n,alp,h,phi,f)
PloterrAdj(n,alp,h,phi,f)
n=5; alp=0.05; phi=0.05;c=1/(2*n); f=-2
PloterrCAll(n,alp,phi,c,f)
PloterrCWD(n,alp,phi,c,f)
n= 5; alp=0.05;phi=0.05; f=-2
errGEN(n,LL,UL,alp,phi,f)
n=10; m=5; a1=0.5; a2=0.5
probPRE(n,m,a1,a2)
a1=.5
probPRE(n,m,a1,a2)
n=1; th0=10; a1=1; b1=1
hypotestBAF1(n,th0,a1,b1)
hypotestBAF3(n,th0,a1,b1)
x=682; n=925; th0=0.75; a1=3; b1=3
hypotestBAF1x(x,n,th0,a1,b1)
x=5; n=5;  a=0.5; b=0.5; th=0.5;
probPOSx(x,n,a,b,th)
probPOS(n,a,b,th)
library(proportion)
library(proportion)
ciAAll(n,alp,h )
ciAAllx(x,n,alp,h )
PlotciAAllx(x,n,alp,h )
PlotciAAll(n,alp,h )
PlotciAAllxg(x,n,alp,h )
PlotciAAllg(n,alp,h )
library(proportion)
PlotciAAllg(n,alp,h )
PlotciAAll(n,alp,h )
PlotciAAll(n,alp,h )
PlotciAAllg(n,alp,h )
PlotciAAllxg(x,n,alp,h )
PlotciAAllx(x,n,alp,h )

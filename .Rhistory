return(data.frame(x,LALR,UALR,LABB,UABB,ZWI))
}
n=5; alp=0.05;h=2
ciALR(n,alp,h)
ciALR<-function(n,alp,h) #n:No of trials,alp:sign level
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(h)) stop("'h' is missing")
if (alp>1 || alp<0 || length(alp)>1) stop("'alpha' has to be between 0 and 1")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if ((class(h) != "integer") & (class(h) != "numeric") || length(h) >1|| h<0 || is.integer(h) ) stop("'h' has to be and integer greater than or equal to 0")
####INPUT n
x=0:n
y1=x+h
k=n+1
n1=n+(2*h)
####INITIALIZATIONS
mle=0
cutoff=0
LALR=0
UALR=0
LABB=0
UABB=0
ZWI=0
###CRITICAL VALUES
cv=qnorm(1-(alp/2), mean = 0, sd = 1)
#LIKELIHOOD-RATIO METHOD
for(i in 1:k)
{
likelhd = function(p) dbinom(y1[i],n1,p)
loglik = function(p) dbinom(y1[i],n1,p,log=TRUE)
mle[i]=optimize(likelhd,c(0,1),maximum=TRUE)$maximum
cutoff[i]=loglik(mle[i])-(cv^2/2)
loglik.optim=function(p){abs(cutoff[i]-loglik(p))}
LALR[i]=optimize(loglik.optim, c(0,mle[i]))$minimum
UALR[i]=optimize(loglik.optim, c(mle[i],1))$minimum
if(LALR[i]<0) LABB[i]="YES" else LABB[i]="NO"
if(UALR[i]>1) UABB[i]="YES" else UABB[i]="NO"
if(UALR[i]-LALR[i]==0)ZWI[i]="YES" else ZWI[i]="NO"
}
return(data.frame(x,LALR,UALR,LABB,UABB,ZWI))
}
ciALR(n,alp,h)
?PlotlengthTW
n=5; alp=0.05;a=1;b=1
PlotlengthTW(n,alp,a,b)
n=5; alp=0.05;a=1;b=1
lengthTW(n,alp,a,b)
?PlotexplSIM
LL=c(0,0.01,0.0734,0.18237,0.3344,0.5492)		#Lower and Upper Limits
UL=c(0.4507,0.6655,0.8176,0.9265,0.9899,1)
n= 5; s=5000; a=1; b=1;
PlotexplSIM(n,LL,UL,s,a,b)
?PlotpCOpBIEX
?ciLTx
?covpAAll
n= 10; alp=0.05; h=2;a=1;b=1; t1=0.93;t2=0.97
covpAAll(n,alp,h,a,b,t1,t2)
?hypotestBAF1
n=1; th0=10; a1=1; b1=1
hypotestBAF1(n,th0,a1,b1)
n=10; th0=10; a1=1; b1=1
hypotestBAF1(n,th0,a1,b1)
LL=c(0,0.01,0.0734,0.18237,0.3344,0.5492)
UL=c(0.4507,0.6655,0.8176,0.9265,0.9899,1)
n= 5; alp=0.05; s=5000; a=1; b=1; t1=0.93; t2=0.97
PlotcovpSIM(n,LL,UL,alp,s,a,b,t1,t2)
n=5; alp=0.05;a=1;b=1;a1=1;a2=1
PlotexplBA(n,alp,a,b,a1,a2)
PlotexplBA<-function(n,alp,a,b,a1,a2)
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if (missing(a1)) stop("'a1' is missing")
if (missing(a2)) stop("'a2' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp) >1) stop("'alpha' has to be between 0 and 1")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
if ((class(a1) != "integer") & (class(a1) != "numeric") || length(a1)>1 || a1<0 ) stop("'a1' has to be greater than or equal to 0")
if ((class(a2) != "integer") & (class(a2) != "numeric") || length(a2)>1 || a2<0 ) stop("'a2' has to be greater than or equal to 0")
hp=ew=method=gMean=gMax=gLL=gUL=NULL
####INPUT n
x=0:n
k=n+1
####INITIALIZATIONS
LBAQ=0
UBAQ=0
LBAH=0
UBAH=0
s=5000
LEBAQ=0 								#LENGTH OF INTERVAL
LEBAH=0
ewiBAQ=matrix(0,k,s)						#Expected length quantity in sum
ewBAQ=0
ewiBAH=matrix(0,k,s)						#Expected length quantity in sum
ewBAH=0									#Expected Length
#library(TeachingDemos)				#To get HPDs
for(i in 1:k)
{
#Quantile Based Intervals
LBAQ[i]=qbeta(alp/2,x[i]+a1,n-x[i]+a2)
UBAQ[i]=qbeta(1-(alp/2),x[i]+a1,n-x[i]+a2)
LBAH[i]=TeachingDemos::hpd(qbeta,shape1=x[i]+a1,shape2=n-x[i]+a2,conf=1-alp)[1]
UBAH[i]=TeachingDemos::hpd(qbeta,shape1=x[i]+a1,shape2=n-x[i]+a2,conf=1-alp)[2]
LEBAQ[i]=UBAQ[i]-LBAQ[i]
LEBAH[i]=UBAH[i]-LBAH[i]
}
#sumLEBAQ=sum(LEBAQ)
#sumLEBAH=sum(LEBAH)
####Expected Length
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
ewiBAQ[i,j]=LEBAQ[i]*dbinom(i-1, n,hp[j])
ewiBAH[i,j]=LEBAH[i]*dbinom(i-1, n,hp[j])
}
ewBAQ[j]=sum(ewiBAQ[,j])
ewBAH[j]=sum(ewiBAH[,j])						#Expected Length
}
ELBAQ=data.frame(hp,ew=ewBAQ,method="Quantile")
ELBAH=data.frame(hp,ew=ewBAH,method="HPD")
df.ba=rbind(ELBAQ,ELBAH)
ggplot2::ggplot(df.ba, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length of Bayesian Quantile & HPD based methods") +
ggplot2::labs(y = "Expected Length") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(ggplot2::aes(color=method)) +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5,color="brown"),linetype = 2)+
ggplot2::scale_colour_manual(name='Heading',
values=c('Quantile' ='black',
'HPD' = 'red',
'Confidence Level'='blue'),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(1,1))))
}
PlotexplBA(n,alp,a,b,a1,a2)
####INPUT n
x=0:n
k=n+1
####INITIALIZATIONS
LBAQ=0
UBAQ=0
LBAH=0
UBAH=0
s=5000
LEBAQ=0 								#LENGTH OF INTERVAL
LEBAH=0
ewiBAQ=matrix(0,k,s)						#Expected length quantity in sum
ewBAQ=0
ewiBAH=matrix(0,k,s)						#Expected length quantity in sum
ewBAH=0									#Expected Length
#library(TeachingDemos)				#To get HPDs
for(i in 1:k)
{
#Quantile Based Intervals
LBAQ[i]=qbeta(alp/2,x[i]+a1,n-x[i]+a2)
UBAQ[i]=qbeta(1-(alp/2),x[i]+a1,n-x[i]+a2)
LBAH[i]=TeachingDemos::hpd(qbeta,shape1=x[i]+a1,shape2=n-x[i]+a2,conf=1-alp)[1]
UBAH[i]=TeachingDemos::hpd(qbeta,shape1=x[i]+a1,shape2=n-x[i]+a2,conf=1-alp)[2]
LEBAQ[i]=UBAQ[i]-LBAQ[i]
LEBAH[i]=UBAH[i]-LBAH[i]
}
#sumLEBAQ=sum(LEBAQ)
#sumLEBAH=sum(LEBAH)
####Expected Length
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
ewiBAQ[i,j]=LEBAQ[i]*dbinom(i-1, n,hp[j])
ewiBAH[i,j]=LEBAH[i]*dbinom(i-1, n,hp[j])
}
ewBAQ[j]=sum(ewiBAQ[,j])
ewBAH[j]=sum(ewiBAH[,j])						#Expected Length
}
ELBAQ=data.frame(hp,ew=ewBAQ,method="Quantile")
ELBAH=data.frame(hp,ew=ewBAH,method="HPD")
df.ba=rbind(ELBAQ,ELBAH)
ggplot2::ggplot(df.ba, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length of Bayesian Quantile & HPD based methods") +
ggplot2::labs(y = "Expected Length") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(ggplot2::aes(color=method)) +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5,color="brown"),linetype = 2)+
ggplot2::scale_colour_manual(name='Heading',
values=c('Quantile' ='black',
'HPD' = 'red',
'Confidence Level'='blue'),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(1,2,1))))
ggplot2::ggplot(df.ba, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length of Bayesian Quantile & HPD based methods") +
ggplot2::labs(y = "Expected Length") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(ggplot2::aes(color=method)) +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5),linetype = 2)+
ggplot2::scale_colour_manual(name='Heading',
values=c('Quantile' ='black',
'HPD' = 'red',
'Confidence Level'='blue'),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(1,2,1))))
head(df.ba)
unique(df.ba$method)
ggplot2::ggplot(df.ba, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length of Bayesian Quantile & HPD based methods") +
ggplot2::labs(y = "Expected Length") +
ggplot2::labs(x = "p") +
ggplot2::geom_line(ggplot2::aes(color=method)) +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5),linetype = 2)+
ggplot2::scale_colour_manual(name='Heading',
values=c('Quantile' ='black',
'HPD' = 'red'),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(1,1))))
?PlotexplEX
n=5; alp=0.05;e=c(0.1,0.5,0.95,1);a=1;b=1 #Range including Mid-p and Clopper-Pearson
PlotexplEX(n,alp,e,a,b)
n=5; alp=0.05;e=0.5;a=1;b=1
PlotexplEX(n,alp,e,a,b)
PlotexplEX<-function(n,alp,e,a,b) #n:No of trials,alp:sign level,e: Exact method indicator (1:Clop-Pear,0.5:MID-p),a&b beta parameters for hypo "p'
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(e)) stop("'e' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp)>1) stop("'alpha' has to be between 0 and 1")
if (any(e>1) || any(e<0)) stop("'e' has to be between 0 and 1")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
hp=ewEX=NULL
ELEX2=gexplEX(n,alp,e,a,b)
ELEX2$e=as.factor(ELEX2$e)
ggplot2::ggplot(ELEX2, ggplot2::aes(x=hp, y=ewEX, color=e))+
ggplot2::labs(title = "Expected length of Exact method") +
ggplot2::labs(y = "Expected length") +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5),linetype = 2)+
ggplot2::labs(x = "p") +
ggplot2::geom_line()
}
gexplEX<-function(n,alp,e,a,b)
{
nvar=length(e)
res <- data.frame()
for(i in 1:nvar)
{
lu=ncf302(n,alp,e[i],a,b)
res <- rbind(res,lu)
}
return(res)
}
ncf302<-function(n,alp,e,a,b) #n:No of trials,alp:sign level,e: Exact method indicator (1:Clop-Pear,0.5:MID-p),a&b beta parameters for hypo "p'
{
####INPUT n
x=0:n
k=n+1
####INITIALIZATIONS
LEX=0
UEX=0
s=5000
LEEX=0 								#LENGTH OF INTERVAL
ewiEX=matrix(0,k,s)						#Expected length quantity in sum
ewEX=0									#Expected Length
#EXACT METHOD
LEX[1]=0
UEX[1]= 1-((alp/(2*e))^(1/n))
LEX[k]=(alp/(2*e))^(1/n)
UEX[k]=1
LEEX[1]=1-((alp/(2*e))^(1/n))
LEEX[k]=1-((alp/(2*e))^(1/n))
for(i in 1:(k-2))
{
LEX[i+1]=exlim302l(x[i+1],n,alp,e)
UEX[i+1]=exlim302u(x[i+1],n,alp,e)
LEEX[i+1]=UEX[i+1]-LEX[i+1]
}
####Expected Length
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
ewiEX[i,j]=LEEX[i]*dbinom(i-1, n,hp[j])
}
ewEX[j]=sum(ewiEX[,j])						#Expected Length
}
#sumLEEX=sum(LEEX)
ELEX=data.frame(hp,ewEX,e)
return(ELEX)
}
#####TO FIND LOWER LIMITS
exlim302l=function(x,n,alp,e)
{
z=x-1
y=0:z
f1=function(p) (1-e)*dbinom(x,n,p)+sum(dbinom(y,n,p))-(1-(alp/2))
LEX= uniroot(f1,c(0,1))$root
return(LEX)
}
#####TO FIND UPPER LIMITS
exlim302u=function(x,n,alp,e)
{
z=x-1
y=0:z
f2  = function(p) e*dbinom(x,n,p)+sum(dbinom(y,n,p))-(alp/2)
UEX = uniroot(f2,c(0,1))$root
return(UEX)
}
n=5; alp=0.05;e=0.5;a=1;b=1
PlotexplEX(n,alp,e,a,b)
n=5; alp=0.05;e=c(0.1,0.5,0.95,1);a=1;b=1 #Range including Mid-p and Clopper-Pearson
PlotexplEX(n,alp,e,a,b)
library(proportion)
getwd()
library(sand)
C2
n
N
?ciLTx
library(proportion)
?ciLTx
?hypotestBAF1
?pCOpBIAAS
?PlotciAllxg
n=10; th0=0.1; a1=1; b1=1
hypotestBAF1(n,th0,a1,b1)
#"1 < BBaFa01 < 3 : H0 is not worth more than a bare mention
#"3 < BaFa01 < 20 : H0 is positive
#20 < BaFa01 < 150 : strong evidence for H0
#150 < BaFa01 :very strong evidence for H0
?PlotexplSIM
LL=c(0,0.01,0.0734,0.18237,0.3344,0.5492)		#Lower and Upper Limits
UL=c(0.4507,0.6655,0.8176,0.9265,0.9899,1)
n= 5; s=5000; a=1; b=1;
PlotexplSIM(n,LL,UL,s,a,b)
PlotexplSIM<-function(n,LL,UL,s,a,b) #n:No of trials,LL, UL: Lower, Upper Limits, s:No of hypothetical "p", a&b beta parameters for hypo "p'
{
if (missing(n)) stop("'n' is missing")
if (missing(LL)) stop("'Lower limit' is missing")
if (missing(UL)) stop("'Upper Limit' is missing")
if (missing(s)) stop("'s' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if ((class(LL) != "integer") & (class(LL) != "numeric") || any(LL < 0)) stop("'LL' has to be a set of positive numeric vectors")
if ((class(UL) != "integer") & (class(UL) != "numeric") || any(UL < 0)) stop("'UL' has to be a set of positive numeric vectors")
if (length(LL) <= n ) stop("Length of vector LL has to be greater than n")
if (length(UL) <= n ) stop("Length of vector UL has to be greater than n")
if (any(LL[0:n+1] > UL[0:n+1] )) stop("LL value have to be lower than the corrosponding UL value")
if ((class(s) != "integer") & (class(s) != "numeric") || length(s)>1 || s<1  ) stop("'b' has to be greater than or equal to 1")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
hp=ew=method=gMean=gMax=gLL=gUL=explUL=explLL=sumLen=NULL
####INPUT n
x=0:n
k=n+1
ewi=matrix(0,k,s)						#Expected length quantity in sum
ew=0									#Expected Length
LE=0
for(i in 1:k)
{
LE[i]=UL[i]-LL[i]
}
sumLE=sum(LE)
####Expected Length
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
ewi[i,j]=LE[i]*dbinom(i-1, n,hp[j])
}
ew[j]=sum(ewi[,j])						#Expected Length
}
EL=data.frame(hp,ew)
ggplot2::ggplot(EL, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length - Simulation") +
ggplot2::labs(y = "Expected length") +
ggplot2::labs(x = "p") +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5,color="Cutoff"), linetype=2)+
ggplot2::geom_line(ggplot2::aes(color="Expected length"))+
ggplot2::geom_point(ggplot2::aes(color="red"))+
ggplot2::scale_colour_manual(name='Heading',
values=c('Cutoff'="brown",
'Expected length'='red'),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(2,1,1),
linetype=c(1,1,1))))
}
LL=c(0,0.01,0.0734,0.18237,0.3344,0.5492)		#Lower and Upper Limits
UL=c(0.4507,0.6655,0.8176,0.9265,0.9899,1)
n= 5; s=5000; a=1; b=1;
PlotexplSIM(n,LL,UL,s,a,b)
PlotexplSIM<-function(n,LL,UL,s,a,b) #n:No of trials,LL, UL: Lower, Upper Limits, s:No of hypothetical "p", a&b beta parameters for hypo "p'
{
if (missing(n)) stop("'n' is missing")
if (missing(LL)) stop("'Lower limit' is missing")
if (missing(UL)) stop("'Upper Limit' is missing")
if (missing(s)) stop("'s' is missing")
if (missing(a)) stop("'a' is missing")
if (missing(b)) stop("'b' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if ((class(LL) != "integer") & (class(LL) != "numeric") || any(LL < 0)) stop("'LL' has to be a set of positive numeric vectors")
if ((class(UL) != "integer") & (class(UL) != "numeric") || any(UL < 0)) stop("'UL' has to be a set of positive numeric vectors")
if (length(LL) <= n ) stop("Length of vector LL has to be greater than n")
if (length(UL) <= n ) stop("Length of vector UL has to be greater than n")
if (any(LL[0:n+1] > UL[0:n+1] )) stop("LL value have to be lower than the corrosponding UL value")
if ((class(s) != "integer") & (class(s) != "numeric") || length(s)>1 || s<1  ) stop("'b' has to be greater than or equal to 1")
if ((class(a) != "integer") & (class(a) != "numeric") || length(a)>1 || a<0  ) stop("'a' has to be greater than or equal to 0")
if ((class(b) != "integer") & (class(b) != "numeric") || length(b)>1 || b<0  ) stop("'b' has to be greater than or equal to 0")
hp=ew=method=gMean=gMax=gLL=gUL=explUL=explLL=sumLen=NULL
####INPUT n
x=0:n
k=n+1
ewi=matrix(0,k,s)						#Expected length quantity in sum
ew=0									#Expected Length
LE=0
for(i in 1:k)
{
LE[i]=UL[i]-LL[i]
}
sumLE=sum(LE)
####Expected Length
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
ewi[i,j]=LE[i]*dbinom(i-1, n,hp[j])
}
ew[j]=sum(ewi[,j])						#Expected Length
}
EL=data.frame(hp,ew)
ggplot2::ggplot(EL, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length - Simulation") +
ggplot2::labs(y = "Expected length") +
ggplot2::labs(x = "p") +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5,color="Cutoff"), linetype=2)+
ggplot2::geom_line(ggplot2::aes(color="Expected length"))+
ggplot2::geom_point(ggplot2::aes(color="red"))+
ggplot2::scale_colour_manual(name='Heading',
values=c('Cutoff'="brown",
'Expected length'='red'),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(2,1),
linetype=c(1,1))))
}
LL=c(0,0.01,0.0734,0.18237,0.3344,0.5492)		#Lower and Upper Limits
UL=c(0.4507,0.6655,0.8176,0.9265,0.9899,1)
n= 5; s=5000; a=1; b=1;
PlotexplSIM(n,LL,UL,s,a,b)
x=0:n
k=n+1
ewi=matrix(0,k,s)						#Expected length quantity in sum
ew=0									#Expected Length
LE=0
for(i in 1:k)
{
LE[i]=UL[i]-LL[i]
}
sumLE=sum(LE)
####Expected Length
hp=sort(rbeta(s,a,b),decreasing = FALSE)	#HYPOTHETICAL "p"
for (j in 1:s)
{
for(i in 1:k)
{
ewi[i,j]=LE[i]*dbinom(i-1, n,hp[j])
}
ew[j]=sum(ewi[,j])						#Expected Length
}
EL=data.frame(hp,ew)
ggplot2::ggplot(EL, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length - Simulation") +
ggplot2::labs(y = "Expected length") +
ggplot2::labs(x = "p") +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5,color="Cutoff"), linetype=2)+
ggplot2::geom_line(ggplot2::aes(color="Expected length"))+
ggplot2::geom_point(ggplot2::aes(color="red"))+
ggplot2::scale_colour_manual(name='Heading',
values=c('Cutoff'="brown",
'Expected length'="red"),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(2,1),
linetype=c(1,1))))
ggplot2::ggplot(EL, ggplot2::aes(x=hp, y=ew))+
ggplot2::labs(title = "Expected length - Simulation") +
ggplot2::labs(y = "Expected length") +
ggplot2::labs(x = "p") +
ggplot2::geom_vline(ggplot2::aes(xintercept=0.5,color="Cutoff"), linetype=2)+
ggplot2::geom_line(ggplot2::aes(color="Expected length"))+
ggplot2::geom_point(ggplot2::aes(color="red"))+
ggplot2::scale_colour_manual(name='Heading',
values=c('Cutoff'="brown",
'Expected length'="red"),
guide='legend') +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(linetype=c(2,1,1),
linetype=c(1,1,1))))
n=5; alp=0.05;a=1;b=1
PlotexplWD(n,alp,a,b)
gexplWD(n,alp,a,b)
explWD(n,alp,a,b)
lengthWD(n,alp,a,b)
